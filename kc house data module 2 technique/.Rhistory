summary(kc_data)
# Visualize the distribution of house prices
ggplot(kc_data, aes(x = price)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of House Prices",
x = "Price (USD)",
y = "Count") +
theme_minimal()
# Visualize the distribution of square footage (living area)
ggplot(kc_data, aes(x = sqft_living)) +
geom_histogram(binwidth = 250, fill = "darkgreen", color = "black", alpha = 0.7) +
labs(title = "Distribution of Living Area (sqft)",
x = "Square Footage (Living)",
y = "Count") +
theme_minimal()
# Scatter plot: Relationship between living area and price
ggplot(kc_data, aes(x = sqft_living, y = price)) +
geom_point(color = "darkblue", alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Scatter Plot: Sqft Living vs. Price",
x = "Living Area (sqft)",
y = "Price (USD)") +
theme_minimal()
# Create a correlation heatmap for selected numeric variables
# Select key numeric variables: price, sqft_living, bedrooms, bathrooms, grade, and sqft_lot
numeric_vars <- c("price", "sqft_living", "bedrooms", "bathrooms", "grade", "sqft_lot")
cor_matrix <- cor(kc_data[, numeric_vars])
corrplot(cor_matrix, method = "number", type = "upper",
title = "Correlation Heatmap of Key Variables", mar=c(0,0,1,0))
# Splitting the data into training (80%) and testing (20%) sets
set.seed(123)  # for reproducibility
trainIndex <- createDataPartition(kc_data$price, p = 0.8, list = FALSE)
train_data <- kc_data[trainIndex, ]
test_data <- kc_data[-trainIndex, ]
# ---------------------------
# 4. Modeling: Multiple Linear Regression
# ---------------------------
# Build a multiple linear regression model using selected predictors
lm_model <- lm(price ~ sqft_living + bedrooms + bathrooms + grade, data = train_data)
summary(lm_model)
# Predict house prices on the test dataset using the regression model
predictions_lm <- predict(lm_model, newdata = test_data)
# Calculate evaluation metrics: Root Mean Squared Error (RMSE) and Mean Absolute Error (MAE)
rmse_lm <- sqrt(mean((test_data$price - predictions_lm)^2))
mae_lm <- mean(abs(test_data$price - predictions_lm))
cat("RMSE:", rmse_lm, "\n")
cat("Linear Regression Model Evaluation:\n")
cat("MAE:", mae_lm, "\n")
# Diagnostic plots for the regression model to check assumptions (normality, homoscedasticity)
par(mfrow = c(2, 2))  # display multiple plots in one window
plot(lm_model)
par(mfrow = c(1, 1))  # reset plotting layout
# ---------------------------
# 5. Alternative Modeling: Decision Tree
# ---------------------------
# Build a decision tree model to predict house prices
tree_model <- rpart(price ~ sqft_living + bedrooms + bathrooms + grade, data = train_data, method = "anova")
# Plot the decision tree
rpart.plot(tree_model, main = "Decision Tree for Predicting House Prices")
# Predict using the decision tree model on the test dataset
predictions_tree <- predict(tree_model, newdata = test_data)
# Evaluate the decision tree model using RMSE and MAE
rmse_tree <- sqrt(mean((test_data$price - predictions_tree)^2))
mae_tree <- mean(abs(test_data$price - predictions_tree))
cat("\nDecision Tree Model Evaluation:\n")
cat("RMSE:", rmse_tree, "\n")
cat("MAE:", mae_tree, "\n")
# ---------------------------
# ---------------------------
# 6. Interpretation and Recommendations
# ---------------------------
# 6. Interpretation and Recommendations
# ---------------------------
plot(lm_model)
# Build a decision tree model to predict house prices
tree_model <- rpart(price ~ sqft_living + bedrooms + bathrooms + grade, data = train_data, method = "anova")
# Load Required Libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
# Load Required Libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
# Load the Dataset
kc_data <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# Load Required Libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
# Load the Dataset
kc_data <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# Remove Duplicate Entries
kc_data <- kc_data[!duplicated(kc_data$id), ]
# Log Transformation of Price (to reduce skewness)
kc_data$log_price <- log(kc_data$price)
# Enhanced Histogram: Price Distribution
ggplot(kc_data, aes(x = price)) +
geom_histogram(binwidth = 50000, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of House Prices", x = "Price (USD)", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# Enhanced Histogram: Log Price Distribution
ggplot(kc_data, aes(x = log_price)) +
geom_histogram(binwidth = 0.1, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Log-Transformed Price Distribution", x = "Log Price", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# Enhanced Scatter Plot: Sqft Living vs. Price
ggplot(kc_data, aes(x = sqft_living, y = price)) +
geom_point(color = "darkblue", alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Scatter Plot: Sqft Living vs. Price", x = "Living Area (sqft)", y = "Price (USD)") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# Enhanced Correlation Heatmap
cor_matrix <- cor(kc_data[, c("price", "sqft_living", "bedrooms", "bathrooms", "grade", "sqft_lot")])
corrplot(cor_matrix, method = "number", type = "upper",
title = "Correlation Heatmap of Key Variables", mar=c(0,0,1,0))
# Train-Test Split
set.seed(123)
trainIndex <- createDataPartition(kc_data$log_price, p = 0.8, list = FALSE)
train_data <- kc_data[trainIndex, ]
test_data <- kc_data[-trainIndex, ]
lm_log_model <- lm(log_price ~ sqft_living + bedrooms + bathrooms + grade, data = train_data)
summary(lm_log_model)
# Predictions on Test Set
predictions_log_lm <- predict(lm_log_model, newdata = test_data)
# Convert Log Predictions Back to Price Scale
predictions_lm <- exp(predictions_log_lm)
# Evaluation Metrics
rmse_log_lm <- sqrt(mean((test_data$price - predictions_lm)^2))
mae_log_lm <- mean(abs(test_data$price - predictions_lm))
cat("Log-Transformed Linear Regression Model Evaluation:\n")
cat("RMSE:", rmse_log_lm, "\n")
cat("MAE:", mae_log_lm, "\n")
tree_model <- rpart(log_price ~ sqft_living + bedrooms + bathrooms + grade, data = train_data, method = "anova")
rpart.plot(tree_model, main = "Decision Tree for Predicting House Prices (Log Price)")
# Predictions and Evaluation
predictions_tree <- predict(tree_model, newdata = test_data)
predictions_tree <- exp(predictions_tree)  # Convert back from log scale
rmse_tree <- sqrt(mean((test_data$price - predictions_tree)^2))
mae_tree <- mean(abs(test_data$price - predictions_tree))
cat("\nDecision Tree Model Evaluation:\n")
cat("RMSE:", rmse_tree, "\n")
cat("MAE:", mae_tree, "\n")
rf_model <- randomForest(log_price ~ sqft_living + bedrooms + bathrooms + grade, data = train_data, ntree = 500)
predictions_rf <- predict(rf_model, newdata = test_data)
predictions_rf <- exp(predictions_rf)  # Convert back from log scale
rmse_rf <- sqrt(mean((test_data$price - predictions_rf)^2))
mae_rf <- mean(abs(test_data$price - predictions_rf))
cat("\nRandom Forest Model Evaluation:\n")
cat("RMSE:", rmse_rf, "\n")
cat("MAE:", mae_rf, "\n")
importance(rf_model)
varImpPlot(rf_model)
# Load Required Libraries
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
# Load the Dataset
kc_data <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# Remove Duplicate Entries
kc_data <- kc_data[!duplicated(kc_data$id), ]
# Log Transformation of Price (to reduce skewness)
kc_data$log_price <- log(kc_data$price)
# --------------------------------
# Train-Test Split
# --------------------------------
set.seed(123)
trainIndex <- createDataPartition(kc_data$log_price, p = 0.8, list = FALSE)
train_data <- kc_data[trainIndex, ]
test_data <- kc_data[-trainIndex, ]
# --------------------------------
# Updated Multiple Linear Regression Model (With Zipcode)
# --------------------------------
lm_model_zip <- lm(log_price ~ sqft_living + bedrooms + bathrooms + grade + factor(zipcode), data = train_data)
summary(lm_model_zip)
# Predictions on Test Set
predictions_log_lm_zip <- predict(lm_model_zip, newdata = test_data)
# Convert Log Predictions Back to Price Scale
predictions_lm_zip <- exp(predictions_log_lm_zip)
# Evaluation Metrics
rmse_log_lm_zip <- sqrt(mean((test_data$price - predictions_lm_zip)^2))
mae_log_lm_zip <- mean(abs(test_data$price - predictions_lm_zip))
cat("Log-Transformed Linear Regression Model (with Zipcode) Evaluation:\n")
cat("RMSE:", rmse_log_lm_zip, "\n")
cat("MAE:", mae_log_lm_zip, "\n")
# --------------------------------
# Decision Tree Model (With Zipcode)
# --------------------------------
tree_model_zip <- rpart(log_price ~ sqft_living + bedrooms + bathrooms + grade + factor(zipcode), data = train_data, method = "anova")
rpart.plot(tree_model_zip, main = "Decision Tree for Predicting House Prices (With Zipcode)")
# Predictions and Evaluation
predictions_tree_zip <- predict(tree_model_zip, newdata = test_data)
predictions_tree_zip <- exp(predictions_tree_zip)  # Convert back from log scale
rmse_tree_zip <- sqrt(mean((test_data$price - predictions_tree_zip)^2))
mae_tree_zip <- mean(abs(test_data$price - predictions_tree_zip))
cat("\nDecision Tree Model (With Zipcode) Evaluation:\n")
cat("RMSE:", rmse_tree_zip, "\n")
cat("MAE:", mae_tree_zip, "\n")
# --------------------------------
# Random Forest Model (With Zipcode)
# --------------------------------
rf_model_zip <- randomForest(log_price ~ sqft_living + bedrooms + bathrooms + grade + factor(zipcode), data = train_data, ntree = 500)
# Predictions and Evaluation
predictions_rf_zip <- predict(rf_model_zip, newdata = test_data)
predictions_rf_zip <- exp(predictions_rf_zip)  # Convert back from log scale
rmse_rf_zip <- sqrt(mean((test_data$price - predictions_rf_zip)^2))
mae_rf_zip <- mean(abs(test_data$price - predictions_rf_zip))
cat("\nRandom Forest Model (With Zipcode) Evaluation:\n")
cat("RMSE:", rmse_rf_zip, "\n")
cat("MAE:", mae_rf_zip, "\n")
# --------------------------------
# Feature Importance from Random Forest
# --------------------------------
importance(rf_model_zip)
varImpPlot(rf_model_zip, main="Feature Importance in Random Forest Model (With Zipcode)")
# --------------------------------
# Random Forest Model (With Zipcode)
# --------------------------------
rf_model_zip <- randomForest(log_price ~ sqft_living + bedrooms + bathrooms + grade + factor(`zipcode`), data = train_data, ntree = 500)
# --------------------------------
# Load Required Libraries
# --------------------------------
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
# --------------------------------
# Load the Dataset & Preprocessing
# --------------------------------
kc_data <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# Remove Duplicate Entries
kc_data <- kc_data[!duplicated(kc_data$id), ]
# Convert Zipcode to a Factor (Fix for Random Forest)
kc_data$zipcode <- as.factor(kc_data$zipcode)
# Log Transformation of Price (to reduce skewness)
kc_data$log_price <- log(kc_data$price)
# --------------------------------
# Train-Test Split
# --------------------------------
set.seed(123)
trainIndex <- createDataPartition(kc_data$log_price, p = 0.8, list = FALSE)
train_data <- kc_data[trainIndex, ]
test_data <- kc_data[-trainIndex, ]
# 1. Enhanced Histogram: Log Price Distribution
ggplot(kc_data, aes(x = log_price)) +
geom_histogram(binwidth = 0.1, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Log-Transformed Price Distribution", x = "Log Price", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# 2. Enhanced Scatter Plot: Sqft Living vs. Price
ggplot(kc_data, aes(x = sqft_living, y = price)) +
geom_point(color = "darkblue", alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Scatter Plot: Sqft Living vs. Price", x = "Living Area (sqft)", y = "Price (USD)") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# 3. Enhanced Correlation Heatmap
cor_matrix <- cor(kc_data[, c("price", "sqft_living", "bedrooms", "bathrooms", "grade", "sqft_lot")])
corrplot(cor_matrix, method = "number", type = "upper",
title = "Correlation Heatmap of Key Variables", mar=c(0,0,1,0))
# --------------------------------
# Multiple Linear Regression Model (With Zipcode)
# --------------------------------
lm_model_zip <- lm(log_price ~ sqft_living + bedrooms + bathrooms + grade + zipcode, data = train_data)
summary(lm_model_zip)
# Predictions on Test Set
predictions_log_lm_zip <- predict(lm_model_zip, newdata = test_data)
# Convert Log Predictions Back to Price Scale
predictions_lm_zip <- exp(predictions_log_lm_zip)
# Evaluation Metrics
rmse_log_lm_zip <- sqrt(mean((test_data$price - predictions_lm_zip)^2))
mae_log_lm_zip <- mean(abs(test_data$price - predictions_lm_zip))
cat("Log-Transformed Linear Regression Model (with Zipcode) Evaluation:\n")
cat("RMSE:", rmse_log_lm_zip, "\n")
cat("MAE:", mae_log_lm_zip, "\n")
# --------------------------------
# Decision Tree Model (With Zipcode)
# --------------------------------
tree_model_zip <- rpart(log_price ~ sqft_living + bedrooms + bathrooms + grade + zipcode, data = train_data, method = "anova")
rpart.plot(tree_model_zip, main = "Decision Tree for Predicting House Prices (With Zipcode)")
# Predictions and Evaluation
predictions_tree_zip <- predict(tree_model_zip, newdata = test_data)
predictions_tree_zip <- exp(predictions_tree_zip)  # Convert back from log scale
rmse_tree_zip <- sqrt(mean((test_data$price - predictions_tree_zip)^2))
mae_tree_zip <- mean(abs(test_data$price - predictions_tree_zip))
cat("\nDecision Tree Model (With Zipcode) Evaluation:\n")
cat("RMSE:", rmse_tree_zip, "\n")
cat("MAE:", mae_tree_zip, "\n")
# --------------------------------
# Random Forest Model (With Zipcode)
# --------------------------------
rf_model_zip <- randomForest(log_price ~ sqft_living + bedrooms + bathrooms + grade + zipcode,
data = train_data, ntree = 500, importance = TRUE)
# Predictions and Evaluation
predictions_rf_zip <- predict(rf_model_zip, newdata = test_data)
predictions_rf_zip <- exp(predictions_rf_zip)  # Convert back from log scale
rmse_rf_zip <- sqrt(mean((test_data$price - predictions_rf_zip)^2))
mae_rf_zip <- mean(abs(test_data$price - predictions_rf_zip))
# --------------------------------
# Load Required Libraries
# --------------------------------
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
# --------------------------------
# Load the Dataset & Preprocessing
# --------------------------------
kc_data <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# Remove Duplicate Entries
kc_data <- kc_data[!duplicated(kc_data$id), ]
# Convert Zipcode to a Factor
kc_data$zipcode <- as.factor(kc_data$zipcode)
# Log Transformation of Price (to reduce skewness)
kc_data$log_price <- log(kc_data$price)
# --------------------------------
# Encode Zipcode into Price-Based Clusters (Fix for RandomForest)
# --------------------------------
zipcode_median_price <- kc_data %>%
group_by(zipcode) %>%
summarize(median_price = median(price)) %>%
arrange(median_price)
# Assign Cluster Labels (Rank-Based Encoding)
zipcode_median_price$zipcode_cluster <- as.numeric(factor(zipcode_median_price$median_price,
levels = unique(zipcode_median_price$median_price)))
# Merge the Clustered Zipcode Data Back into the Main Dataset
kc_data <- merge(kc_data, zipcode_median_price, by = "zipcode")
# Remove Original Zipcode Column (Since It's Categorical)
kc_data$zipcode <- NULL
# --------------------------------
# Train-Test Split (With Fixed Zipcode Encoding)
# --------------------------------
set.seed(123)
trainIndex <- createDataPartition(kc_data$log_price, p = 0.8, list = FALSE)
train_data <- kc_data[trainIndex, ]
test_data <- kc_data[-trainIndex, ]
# 1. Enhanced Histogram: Log Price Distribution
ggplot(kc_data, aes(x = log_price)) +
geom_histogram(binwidth = 0.1, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Log-Transformed Price Distribution", x = "Log Price", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# 2. Enhanced Scatter Plot: Sqft Living vs. Price
ggplot(kc_data, aes(x = sqft_living, y = price)) +
geom_point(color = "darkblue", alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Scatter Plot: Sqft Living vs. Price", x = "Living Area (sqft)", y = "Price (USD)") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# 3. Enhanced Correlation Heatmap
cor_matrix <- cor(kc_data[, c("price", "sqft_living", "bedrooms", "bathrooms", "grade", "sqft_lot")])
corrplot(cor_matrix, method = "number", type = "upper",
title = "Correlation Heatmap of Key Variables", mar=c(0,0,1,0))
# --------------------------------
# Multiple Linear Regression Model (With Zipcode Clusters)
# --------------------------------
lm_model_zip <- lm(log_price ~ sqft_living + bedrooms + bathrooms + grade + zipcode_cluster, data = train_data)
summary(lm_model_zip)
# Predictions on Test Set
predictions_log_lm_zip <- predict(lm_model_zip, newdata = test_data)
# Convert Log Predictions Back to Price Scale
predictions_lm_zip <- exp(predictions_log_lm_zip)
# Evaluation Metrics
rmse_log_lm_zip <- sqrt(mean((test_data$price - predictions_lm_zip)^2))
mae_log_lm_zip <- mean(abs(test_data$price - predictions_lm_zip))
cat("Log-Transformed Linear Regression Model (with Zipcode Clusters) Evaluation:\n")
cat("RMSE:", rmse_log_lm_zip, "\n")
cat("MAE:", mae_log_lm_zip, "\n")
# --------------------------------
# Decision Tree Model (With Zipcode Clusters)
# --------------------------------
tree_model_zip <- rpart(log_price ~ sqft_living + bedrooms + bathrooms + grade + zipcode_cluster, data = train_data, method = "anova")
rpart.plot(tree_model_zip, main = "Decision Tree for Predicting House Prices (With Zipcode Clusters)")
# Predictions and Evaluation
predictions_tree_zip <- predict(tree_model_zip, newdata = test_data)
predictions_tree_zip <- exp(predictions_tree_zip)  # Convert back from log scale
rmse_tree_zip <- sqrt(mean((test_data$price - predictions_tree_zip)^2))
mae_tree_zip <- mean(abs(test_data$price - predictions_tree_zip))
cat("\nDecision Tree Model (With Zipcode Clusters) Evaluation:\n")
cat("RMSE:", rmse_tree_zip, "\n")
cat("MAE:", mae_tree_zip, "\n")
# --------------------------------
# Random Forest Model (With Zipcode Clusters)
# --------------------------------
rf_model_zip <- randomForest(log_price ~ sqft_living + bedrooms + bathrooms + grade + zipcode_cluster,
data = train_data, ntree = 500, importance = TRUE)
# Predictions
predictions_rf_zip <- predict(rf_model_zip, newdata = test_data)
# Convert Log Predictions Back to Price Scale
predictions_rf_zip <- exp(predictions_rf_zip)
# Evaluation Metrics
rmse_rf_zip <- sqrt(mean((test_data$price - predictions_rf_zip)^2))
mae_rf_zip <- mean(abs(test_data$price - predictions_rf_zip))
cat("\nRandom Forest Model (With Zipcode Clusters) Evaluation:\n")
cat("RMSE:", rmse_rf_zip, "\n")
cat("MAE:", mae_rf_zip, "\n")
# --------------------------------
# Feature Importance from Random Forest
# --------------------------------
importance(rf_model_zip)
varImpPlot(rf_model_zip, main="Feature Importance in Random Forest Model (With Zipcode Clusters)")
## -------------------------------------------------------------------------------------------------------------------------
# Convert Date Column to Proper Date Format
kc_data$date <- as.Date(kc_data$date, format="%Y%m%dT000000")
kc_data$month <- month(kc_data$date)
kc_data$year <- year(kc_data$date)
# Monthly House Price Trends
ggplot(kc_data, aes(x = factor(month), y = price)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Seasonality Effects: Monthly Price Distribution", x = "Month", y = "Price (USD)") +
theme_minimal()
# --------------------------------
# Load Required Libraries
# --------------------------------
library(ggplot2)
library(dplyr)
library(corrplot)
library(rpart)
library(rpart.plot)
library(caret)
library(randomForest)
# --------------------------------
# Load the Dataset & Preprocessing
# --------------------------------
kc_data <- read.csv("kc_house_data.csv", stringsAsFactors = FALSE)
# Remove Duplicate Entries
kc_data <- kc_data[!duplicated(kc_data$id), ]
# Convert Zipcode to a Factor
kc_data$zipcode <- as.factor(kc_data$zipcode)
# Log Transformation of Price (to reduce skewness)
kc_data$log_price <- log(kc_data$price)
# --------------------------------
# Encode Zipcode into Price-Based Clusters (Fix for RandomForest)
# --------------------------------
zipcode_median_price <- kc_data %>%
group_by(zipcode) %>%
summarize(median_price = median(price)) %>%
arrange(median_price)
# Assign Cluster Labels (Rank-Based Encoding)
zipcode_median_price$zipcode_cluster <- as.numeric(factor(zipcode_median_price$median_price,
levels = unique(zipcode_median_price$median_price)))
# Merge the Clustered Zipcode Data Back into the Main Dataset
kc_data <- merge(kc_data, zipcode_median_price, by = "zipcode")
# Remove Original Zipcode Column (Since It's Categorical)
kc_data$zipcode <- NULL
# --------------------------------
# Train-Test Split (With Fixed Zipcode Encoding)
# --------------------------------
set.seed(123)
trainIndex <- createDataPartition(kc_data$log_price, p = 0.8, list = FALSE)
train_data <- kc_data[trainIndex, ]
test_data <- kc_data[-trainIndex, ]
# 1. Enhanced Histogram: Log Price Distribution
ggplot(kc_data, aes(x = log_price)) +
geom_histogram(binwidth = 0.1, fill = "purple", color = "black", alpha = 0.7) +
labs(title = "Log-Transformed Price Distribution", x = "Log Price", y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
# 2. Enhanced Scatter Plot: Sqft Living vs. Price
ggplot(kc_data, aes(x = sqft_living, y = price)) +
geom_point(color = "darkblue", alpha = 0.5) +
geom_smooth(method = "lm", color = "red") +
labs(title = "Scatter Plot: Sqft Living vs. Price", x = "Living Area (sqft)", y = "Price (USD)") +
theme_minimal() +
theme(plot.title = element_text(size=14, face="bold"))
## -------------------------------------------------------------------------------------------------------------------------
# Convert Date Column to Proper Date Format
kc_data$date <- as.Date(kc_data$date, format="%Y%m%dT000000")
kc_data$month <- month(kc_data$date)
kc_data$year <- year(kc_data$date)
# Monthly House Price Trends
ggplot(kc_data, aes(x = factor(month), y = price)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Seasonality Effects: Monthly Price Distribution", x = "Month", y = "Price (USD)") +
theme_minimal()
# Load Required Libraries (Ensure lubridate is loaded)
library(lubridate)
# Convert Date Column to Proper Date Format
kc_data$date <- as.Date(kc_data$date, format="%Y%m%d")
# Extract Month and Year for Seasonality Analysis
kc_data$month <- month(kc_data$date, label = TRUE)  # Month as Factor (Jan, Feb, etc.)
kc_data$year <- year(kc_data$date)
ggplot(kc_data, aes(x = month, y = price)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Seasonality Effects: Monthly Price Distribution", x = "Month", y = "Price (USD)") +
theme_minimal()
ggplot(kc_data, aes(x = factor(year), y = price)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Yearly House Price Trends", x = "Year", y = "Price (USD)") +
theme_minimal()
